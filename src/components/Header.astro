---
import { Image } from 'astro:assets';
import { Icon } from 'astro-icon/components';
import HeaderLink from '@components/HeaderLink.astro';
import { useI18n } from '@utils/translate';
import { SITE_TITLE } from '../constants';
import config from '../content/site-config.json';

type Props = {
  locale: string;
}

type MenuItem = {
  image: string;
  label:  Record<string, string>;
  href: string;
};

interface Header {
  logo: string;
  menu: MenuItem[];
  botLink: string;
  botLinkTitle: Record<string, string>;
}

const { locale } = Astro.props;
const t = useI18n(locale);
const header = config.header as Header;
---

<header class="group top-0 z-40 fixed mb-6 lg:mb-20 w-full site-header">
  <div
    class="py-4 transition group-[.is-hidden:not(.show-menu)]:-translate-y-full"
  >
    <div class="relative container">
      <div
        class="flex justify-between items-center gap-4 sm:gap-6 bg-white shadow-black shadow-xs px-3.5 py-4 border-2 rounded-xl"
      >
        <button
          id="burger"
          class="relative menu-button"
          type="button"
          title="Burger button"
        >
          <div
            class="flex justify-center items-center border rounded-full w-7.5 h-7.5"
          >              
            <span class="mx-auto w-4 dot"></span>
            <span class="burger-icon"></span>
          </div>
        </button>

        <a
          class="relative font-heading text-2xl uppercase text-nowrap brand"
          href={Astro.url.origin}
        >
          <img src={header.logo} alt={ t(SITE_TITLE) } />
        </a>
        <a class="relative" href={header.botLink} target="_blank">
          <Icon name="telegram" class="shrink-0" size={32} />
        </a>
        <nav class="flex flex-col space-y-3.5 mx-auto px-6 pb-4 max-h-[80vh] overflow-y-auto site-header__nav container">
          <div class="right-0 bottom-0 left-0 fixed flex justify-center overflow-clip">
            <Image
              class="scale-150 translate-y-1/2"
              src={import("public/rays-menu.svg")}
              format="svg"
              alt="Rays"
            />
          </div>
          <ul class="relative space-y-1">
            {header.menu && header.menu.map((item) => (
              <li class="bg-white p-2 border rounded-lg">
              <HeaderLink
                class="flex items-center gap-3 text-2xl"
                href={Astro.url.origin + item.href}>
                <span class="bg-orange border rounded-lg w-14 aspect-square overflow-clip">
                  <img src={item.image} alt={ t(SITE_TITLE) } />
                </span>
                { t(item.label) }
              </HeaderLink>
            </li>
            ))}
          </ul>         
          <div class="p-0.5 pl-4 border-2 rounded-3xl lang-switcher">
            <div class="flex items-center gap-2 text-sm cursor-pointer">
              <p id="cur_lang" class="inline-flex justify-center font-black align-middle">
                { locale.toUpperCase() }
              </p>
              <span class="inline-block shrink-0">
                <!-- <Icon name="arrow-down" /> -->
                 <img class="border rounded-full w-8 h-8" src={`/${locale}.png`} alt={ locale } />
              </span>
            </div>
            <ul class="gap-3 py-2 dropdown">
              <li>
                <a href="/"> UK </a>
              </li>
              <li>
                <a href="/en"> EN </a>
              </li>
            </ul>
          </div>
          <a class="sm:inline-flex top-0 hover:top-1 active:top-1 relative flex justify-center items-center gap-x-3 bg-black shadow-button shadow-orange-200 hover:shadow-none active:shadow-none p-9 rounded-3xl max-w-full font-black text-white tracking-wide transition-all" href={ header.botLink } target="_blank">
            <span class="truncate">{ t(header.botLinkTitle) }</span>
            <Icon name="telegram" class="shrink-0" size={32} />
          </a>          
        </nav>
      </div>
    </div>
  </div>
</header>

<script>
  const burger = document.getElementById("burger");
  const header = document.querySelector(".site-header");
  const links = document.querySelectorAll(".site-header__nav a");

  [...links].forEach((el) => {
    el.addEventListener("click", (ev: Event): void => {
      header?.classList.remove("show-menu");
    });
  });
  burger?.addEventListener("click", (ev: Event): void => {
    header?.classList.toggle("show-menu");
    ev.preventDefault();
  });

  let oldScrollY = window.scrollY;
  const scrollHandler = (): void => {
    const scrollY = window.scrollY;
    const scrollTop: Boolean = !!scrollY;
    if (scrollTop) {
      header?.classList.add("is-scroll");
    } else {
      header?.classList.remove("is-scroll");
    }
    if (scrollY > oldScrollY && scrollY > 100) {
      header?.classList.add("is-hidden");
    } else {
      header?.classList.remove("is-hidden");
    }
    oldScrollY = scrollY;
  };
  scrollHandler();
  window.addEventListener("scroll", scrollHandler);

  document.addEventListener("click", (ev: Event): void => {
    const target = ev.target as HTMLElement;
    if (!target) return;

    if (target.closest("li")) {
      target.closest("li")?.classList.toggle("show-submenu");
    } else {
      document.querySelector(".show-submenu")?.classList.remove("show-submenu");
    }

    if (target.closest(".lang-switcher")) {
      target.closest(".lang-switcher")?.classList.toggle("show-langs");
    } else {
      document.querySelector(".lang-switcher")?.classList.remove("show-langs");
    }
  });
</script>
